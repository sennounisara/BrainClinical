import streamlit as st
import joblib
import numpy as np
import openpyxl

def load_models():
    """
    Charge les mod√®les entra√Æn√©s
    """
    try:
        models = joblib.load('glioma_models.pkl')
        scalers = joblib.load('glioma_scalers.pkl')
        feature_encoders = joblib.load('glioma_feature_encoders.pkl')
        target_encoders = joblib.load('glioma_target_encoders.pkl')
        feature_names = joblib.load('glioma_feature_names.pkl')
        return models, scalers, feature_encoders, target_encoders, feature_names
    except:
        st.error("‚ùå Impossible de charger les mod√®les. Veuillez d'abord ex√©cuter l'entra√Ænement.")
        return None, None, None, None, None

def main():
    st.set_page_config(
        page_title="Pr√©diction des Gliomes",
        page_icon="üß†",
        layout="wide"
    )
    
    st.title('üß† Pr√©diction des Gliomes - Analyse Clinique')
    st.markdown("---")
    
    # Sidebar avec informations
    st.sidebar.title('‚ÑπÔ∏è Informations sur l\'Application')
    st.sidebar.markdown("""
    ### üéØ Objectif
    Cette application utilise des mod√®les de Machine Learning pour pr√©dire 
    diff√©rents aspects des gliomes bas√©s sur les donn√©es cliniques.
    
    ### üìä Variables pr√©dites:
    - **Progression**: Risque de progression de la tumeur
    - **Survie globale**: Pr√©diction de survie
    - **Grade de la tumeur**: Classification du grade tumoral
    
    ### üî¨ Facteurs pris en compte:
    - Caract√©ristiques d√©mographiques (√¢ge, sexe)
    - Mutations g√©n√©tiques (IDH1, IDH2, MGMT, etc.)
    - Ant√©c√©dents m√©dicaux
    - Traitements re√ßus
    
    ### ‚ö†Ô∏è Avertissement
    Cette application est destin√©e √† des fins √©ducatives et de recherche.
    Les pr√©dictions ne remplacent pas l'avis m√©dical professionnel.
    """)
    
    # Charger les mod√®les
    models, scalers, feature_encoders, target_encoders, feature_names = load_models()
    
    if models is None:
        st.warning("‚ö†Ô∏è Mod√®les non disponibles. Veuillez d'abord ex√©cuter l'entra√Ænement.")
        return
    
    # Interface principale
    st.header('üìã Saisie des Donn√©es Patient')
    
    # Formulaire de saisie
    with st.form("prediction_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üë§ Informations d√©mographiques")
            sex = st.selectbox('Sexe √† la naissance', ['Male', 'Female', 'Unknown'])
            age = st.number_input('√Çge au diagnostic', min_value=0, max_value=100, value=50)
            
            st.subheader("üè• Diagnostic")
            primary_diagnosis = st.selectbox('Diagnostic primaire', 
                                           ['Glioblastoma', 'Astrocytoma', 'Oligodendroglioma', 'Unknown'])
            grade = st.selectbox('Grade de la tumeur primaire', 
                               ['Grade I', 'Grade II', 'Grade III', 'Grade IV', 'Unknown'])
        
        with col2:
            st.subheader("üß¨ Mutations g√©n√©tiques")
            idh1 = st.selectbox('Mutation IDH1', ['Positive', 'Negative', 'Unknown'])
            idh2 = st.selectbox('Mutation IDH2', ['Positive', 'Negative', 'Unknown'])
            codeletion = st.selectbox('Codeletion 1p/19q', ['Present', 'Absent', 'Unknown'])
            mgmt = st.selectbox('M√©thylation MGMT', ['Methylated', 'Unmethylated', 'Unknown'])
            egfr = st.selectbox('Amplification EGFR', ['Present', 'Absent', 'Unknown'])
        
        # Traitements
        st.subheader('üíä Traitements')
        col3, col4 = st.columns(2)
        
        with col3:
            chemo = st.selectbox('Chimioth√©rapie initiale', ['Yes', 'No', 'Unknown'])
            radiation = st.selectbox('Radioth√©rapie', ['Yes', 'No', 'Unknown'])
        
        with col4:
            previous_tumor = st.selectbox('Tumeur c√©r√©brale ant√©rieure', ['Yes', 'No', 'Unknown'])
        
        submitted = st.form_submit_button("üîÆ Faire la Pr√©diction", use_container_width=True)
    
    if submitted:
        st.header('üéØ R√©sultats de la Pr√©diction')
        
        # Pr√©parer les donn√©es d'entr√©e
        input_data = {
            'Sex at Birth': sex,
            'Age at diagnosis': age,
            'Primary Diagnosis': primary_diagnosis,
            'Grade of Primary Brain Tumor': grade,
            'IDH1 mutation': idh1,
            'IDH2 mutation': idh2,
            '1p/19q': codeletion,
            'MGMT methylation': mgmt,
            'EGFR amplification': egfr,
            'Previous Brain Tumor': previous_tumor,
            'Initial Chemo Therapy': chemo,
            'Radiation Therapy': radiation
        }
        
        # Faire les pr√©dictions pour chaque mod√®le
        for target_name, model in models.items():
            if target_name in scalers and target_name in target_encoders:
                st.subheader(f'üìä Pr√©diction: {target_name}')
                
                # Pr√©parer les donn√©es d'entr√©e
                input_features = []
                for feature_name in feature_names:
                    if feature_name in input_data:
                        value = input_data[feature_name]
                        
                        # Encoder si n√©cessaire
                        if feature_name in feature_encoders:
                            encoder = feature_encoders[feature_name]
                            if hasattr(encoder, 'transform'):
                                try:
                                    encoded_value = encoder.transform([str(value)])[0]
                                except:
                                    encoded_value = 0
                            else:
                                # C'est un dictionnaire de mapping
                                encoded_value = encoder.get(str(value), 0)
                        else:
                            encoded_value = value if isinstance(value, (int, float)) else 0
                        
                        input_features.append(encoded_value)
                    else:
                        input_features.append(0)
                
                # Standardiser et pr√©dire
                input_scaled = scalers[target_name].transform([input_features])
                prediction = model.predict(input_scaled)[0]
                probabilities = model.predict_proba(input_scaled)[0]
                
                # Afficher les r√©sultats
                col_result1, col_result2 = st.columns(2)
                
                with col_result1:
                    if target_name == 'Progression':
                        if prediction == 1:
                            st.error("‚ö†Ô∏è Risque de progression d√©tect√©")
                        else:
                            st.success("‚úÖ Faible risque de progression")
                    
                    elif target_name == 'Overall Survival (Death)':
                        if prediction == 1:
                            st.error("üíÄ Risque de mortalit√© √©lev√©")
                        else:
                            st.success("‚úÖ Bon pronostic de survie")
                    
                    elif target_name == 'Grade of Primary Brain Tumor':
                        grade_labels = ['Grade I', 'Grade II', 'Grade III', 'Grade IV']
                        if prediction < len(grade_labels):
                            predicted_grade = grade_labels[prediction]
                            st.info(f"üìã Grade pr√©dit: {predicted_grade}")
                
                with col_result2:
                    # Afficher la confiance
                    max_prob = max(probabilities)
                    st.metric("Confiance du mod√®le", f"{max_prob:.1%}")
                    
                    # Afficher les probabilit√©s pour chaque classe
                    if target_name in target_encoders:
                        encoder = target_encoders[target_name]
                        if hasattr(encoder, 'classes_'):
                            classes = encoder.classes_
                        else:
                            # C'est un dictionnaire, utiliser les cl√©s
                            classes = list(encoder.keys())
                        
                        st.write("**Probabilit√©s par classe:**")
                        for i, (prob, class_name) in enumerate(zip(probabilities, classes)):
                            st.write(f"- {class_name}: {prob:.1%}")
        
        # Recommandations g√©n√©rales
        st.header('üí° Recommandations')
        st.markdown("""
        ### üìã Prochaines √©tapes recommand√©es:
        1. **Consultation m√©dicale**: Discutez de ces r√©sultats avec votre √©quipe m√©dicale
        2. **Surveillance rapproch√©e**: Suivi r√©gulier selon les recommandations
        3. **Tests compl√©mentaires**: Examens suppl√©mentaires si n√©cessaire
        4. **Plan de traitement**: Adaptation du traitement selon les pr√©dictions
        
        ### üî¨ Facteurs de risque identifi√©s:
        - Les mutations g√©n√©tiques (IDH1, MGMT) sont des marqueurs pronostiques importants
        - Le grade tumoral influence significativement le pronostic
        - Les ant√©c√©dents de tumeur c√©r√©brale peuvent modifier l'approche th√©rapeutique
        
        ### ‚ö†Ô∏è Limitations:
        - Ces pr√©dictions sont bas√©es sur des donn√©es historiques
        - Chaque patient est unique et peut r√©pondre diff√©remment
        - Les avanc√©es th√©rapeutiques peuvent modifier les pronostics
        """)

if __name__ == "__main__":
    main()
